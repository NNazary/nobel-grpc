# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import nobel_pb2 as nobel__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in nobel_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NobelServiceStub(object):
    """==============================
    Service Definition
    ==============================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLaureateCountByCategory = channel.unary_unary(
                '/nobel.NobelService/GetLaureateCountByCategory',
                request_serializer=nobel__pb2.CategoryYearRequest.SerializeToString,
                response_deserializer=nobel__pb2.LaureateCountResponse.FromString,
                _registered_method=True)
        self.GetLaureateCountByKeyword = channel.unary_unary(
                '/nobel.NobelService/GetLaureateCountByKeyword',
                request_serializer=nobel__pb2.KeywordRequest.SerializeToString,
                response_deserializer=nobel__pb2.LaureateCountResponse.FromString,
                _registered_method=True)
        self.GetLaureateInfoByName = channel.unary_unary(
                '/nobel.NobelService/GetLaureateInfoByName',
                request_serializer=nobel__pb2.NameRequest.SerializeToString,
                response_deserializer=nobel__pb2.LaureateInfoResponse.FromString,
                _registered_method=True)


class NobelServiceServicer(object):
    """==============================
    Service Definition
    ==============================
    """

    def GetLaureateCountByCategory(self, request, context):
        """Query 1: Total laureates by category and year range
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLaureateCountByKeyword(self, request, context):
        """Query 2: Total laureates with keyword in motivation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLaureateInfoByName(self, request, context):
        """Query 3: Find laureate by name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NobelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLaureateCountByCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLaureateCountByCategory,
                    request_deserializer=nobel__pb2.CategoryYearRequest.FromString,
                    response_serializer=nobel__pb2.LaureateCountResponse.SerializeToString,
            ),
            'GetLaureateCountByKeyword': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLaureateCountByKeyword,
                    request_deserializer=nobel__pb2.KeywordRequest.FromString,
                    response_serializer=nobel__pb2.LaureateCountResponse.SerializeToString,
            ),
            'GetLaureateInfoByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLaureateInfoByName,
                    request_deserializer=nobel__pb2.NameRequest.FromString,
                    response_serializer=nobel__pb2.LaureateInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nobel.NobelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nobel.NobelService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NobelService(object):
    """==============================
    Service Definition
    ==============================
    """

    @staticmethod
    def GetLaureateCountByCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nobel.NobelService/GetLaureateCountByCategory',
            nobel__pb2.CategoryYearRequest.SerializeToString,
            nobel__pb2.LaureateCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLaureateCountByKeyword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nobel.NobelService/GetLaureateCountByKeyword',
            nobel__pb2.KeywordRequest.SerializeToString,
            nobel__pb2.LaureateCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLaureateInfoByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nobel.NobelService/GetLaureateInfoByName',
            nobel__pb2.NameRequest.SerializeToString,
            nobel__pb2.LaureateInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
